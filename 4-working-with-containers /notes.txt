Starting Containers
--------------------

docker ps : to view running containers
docker run react-app : does not allows to type in terminal
docker run -d react-app : runs container in detached (-d) mode
docker run -d --name blue-sky react-app : giving container a name (blue-sky)


Viewing the Logs
-----------------

docker logs 2b44c6f945fb : to view container logs, 2b44c6f945fb is container id here
docker logs -f [containerId] : to follow the logs
docker logs -t [containerId] : to see the timestamps of logs


Publishing Ports
-----------------

docker run -d -p 80:3000 --name port-app react-app 
-d means detached
-p means port mapping of docker container (80) to machine (3000)
port-app is the container name
react-app is the image name

docker ps
see port mapping below

CONTAINER ID   IMAGE       COMMAND                  CREATED              STATUS              PORTS                  NAMES
709ac87bb456   react-app   "docker-entrypoint.sâ€¦"   About a minute ago   Up About a minute   0.0.0.0:80->3000/tcp   port-app


Executing Commands in Running containers
-----------------------------------------

docker exec port-app ls : to execute commands in running container
docker exec -it port-app sh : open shell


Stopping and Starting Containers
---------------------------------

docker stop port-app : to stop port-app container
docker start port-app : to start port-app container

RUN VS STOP command: run is used for starting new containers and stop is used for starting old stopped containers


Removing Containers
--------------------

docker container rm [containerId]
or
docker rm [imageName]

docker container rm 2b44c6f945fb
docker rm port-app

use -f to force remove the running container

docker container prune : to remove all stopped containers


Persisting Data using Volumes
------------------------------

Volumes: A volume is a storage outside of containers, 
it can be a directory on the host, or somewhere on the cloud.

docker volume
Usage:  docker volume COMMAND
Manage volumes
Commands:
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove all unused local volumes
  rm          Remove one or more volumes

docker volume create app-data : create a docker volume named app-data

docker volume ls
DRIVER    VOLUME NAME
local     app-data

docker volume inspect app-data
[
    {
        "CreatedAt": "2023-01-02T16:01:30Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/app-data/_data",
        "Name": "app-data",
        "Options": {},
        "Scope": "local"
    }
]

docker run -d -p 4000:3000 -v app-data:/app/data react-app
the above command attaches docker volume to docker image

-d means detached
-p means port mapping of docker container (4000) to machine (3000)
-v means volume
app-data is docker volume
/app/data is react-app directory to be attached with volume
react-app is the image name

docker exec -it 9768c3d82786 sh
the above command executes shell session in container id 9768c3d82786, image: react-app 

cd data && echo "written from docker container" > data.txt : adding a file to attached volume storage

cat data.txt 
output of above command : written from docker container

If we delete the above container, "data.txt" will still exist,
because this file is stored in volume storage instead of container storage.

Hence: 
Volumes are the right way to persist data in dockerized applications,
because they have different lifecycle than containers.