Cleaning Up our Workspace
--------------------------

docker container ls -a -q : to get all the container id's
docker image ls -q : to get all the image id's

docker container rm -f $(docker container ls -a -q) : to remove all the containers
docker image rm -f $(docker image ls -q) : to remove all the images

or use GUI

open Docker Desktop
click on bug icon on the right top corner 
then click on Clean / Purge data


JSON and YAML Formats
----------------------

JSON format:

{
  "name": "The Ultimate Docker Course",
  "price": 149,
  "is_published": true,
  "tags": [
    "software",
    "devops"
  ],
  "author": {
    "first_name": "Mosh",
    "last_name": "Hamedani"
  }
}

YAML format:

name: The Ultimate Docker Course
price: 149
is_published: true
tags: 
    - software
    - devops
author:
    first_name: Mosh
    last_name: Hamedani


Docker Compose
----------------

docker-compose --help

Usage:  docker compose [OPTIONS] COMMAND

Docker Compose

Options:
      --ansi string                Control when to print ANSI control characters ("never"|"always"|"auto") (default "auto")
      --compatibility              Run compose in backward compatibility mode
      --env-file string            Specify an alternate environment file.
  -f, --file stringArray           Compose configuration files
      --profile stringArray        Specify a profile to enable
      --project-directory string   Specify an alternate working directory
                                   (default: the path of the, first specified, Compose file)
  -p, --project-name string        Project name

Commands:
  build       Build or rebuild services
  convert     Converts the compose file to platform's canonical format
  cp          Copy files/folders between a service container and the local filesystem
  create      Creates containers for a service.
  down        Stop and remove containers, networks
  events      Receive real time events from containers.
  exec        Execute a command in a running container.
  images      List images used by the created containers
  kill        Force stop service containers.
  logs        View output from containers
  ls          List running compose projects
  pause       Pause services
  port        Print the public port for a port binding.
  ps          List containers
  pull        Pull service images
  push        Push service images
  restart     Restart service containers
  rm          Removes stopped service containers
  run         Run a one-off command on a service.
  start       Start services
  stop        Stop services
  top         Display the running processes
  unpause     Unpause services
  up          Create and start containers
  version     Show the Docker Compose version information

Run 'docker compose COMMAND --help' for more information on a command.


Building Images
----------------

docker-compose build --help

Usage:  docker compose build [OPTIONS] [SERVICE...]

Build or rebuild services

Options:
      --build-arg stringArray   Set build-time variables for services.
      --no-cache                Do not use cache when building the image
      --progress string         Set type of progress output (auto, tty, plain, quiet) (default "auto")
      --pull                    Always attempt to pull a newer version of the image.
  -q, --quiet                   Don't print anything to STDOUT
      --ssh string              Set SSH authentications used when building service images. (use 'default' for using your default SSH Agent)

docker-compose build : to build images using docker-compose.yml file

docker images

REPOSITORY      TAG       IMAGE ID       CREATED              SIZE
vidly-app-web   latest    e69b4d6cb24d   About a minute ago   298MB
vidly-app-api   latest    a49439cc3c6f   About a minute ago   183MB

docker-compose build --no-cache : Do not use cache when building the image


Starting and Stopping the Application
--------------------------------------

Starting
---------

docker-compose up : start application with docker-compose

docker-compose up --build : build and start at the same time

docker-compose up -d : start in detached mode

docker-compose ps : see all the container relevant to your application

NAME                COMMAND                  SERVICE             STATUS              PORTS
vidly-app-api-1     "docker-entrypoint.s…"   api                 running             0.0.0.0:3001->3001/tcp
vidly-app-db-1      "docker-entrypoint.s…"   db                  running             0.0.0.0:27017->27017/tcp
vidly-app-web-1     "docker-entrypoint.s…"   web                 running             0.0.0.0:3000->3000/tcp

Vidly app is now running on http://localhost:3000/

Stopping
---------

docker-compose down : to stop and remove the containers


Docker Networking
------------------

docker network ls
NETWORK ID     NAME                DRIVER    SCOPE
676e545c3fc8   bridge              bridge    local
085a9e46916f   host                host      local
1931aef55057   none                null      local
9f67ebfc1ff3   vidly-app_default   bridge    local

9f67ebfc1ff3   vidly-app_default   bridge    local
this is our app network

this network contains 3 hosts: 
web, api and db
and they talk to each other using their name

docker ps
CONTAINER ID   IMAGE              COMMAND                  CREATED          STATUS          PORTS                      NAMES
c57dc075768b   vidly-app-api      "docker-entrypoint.s…"   21 minutes ago   Up 21 minutes   0.0.0.0:3001->3001/tcp     vidly-app-api-1
f0ca6e2b6beb   mongo:4.0-xenial   "docker-entrypoint.s…"   21 minutes ago   Up 21 minutes   0.0.0.0:27017->27017/tcp   vidly-app-db-1
f352c308a99e   vidly-app-web      "docker-entrypoint.s…"   21 minutes ago   Up 21 minutes   0.0.0.0:3000->3000/tcp     vidly-app-web-1

docker exec -it -u root f352c308a99e sh : login as root user in vidly-app-web and open sh session

ping api : pinging api container from web app container

PING api (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.452 ms
64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.338 ms
64 bytes from 172.18.0.2: seq=2 ttl=64 time=0.306 ms
64 bytes from 172.18.0.2: seq=3 ttl=64 time=0.389 ms
64 bytes from 172.18.0.2: seq=4 ttl=64 time=0.350 ms
64 bytes from 172.18.0.2: seq=5 ttl=64 time=0.237 ms
64 bytes from 172.18.0.2: seq=6 ttl=64 time=0.207 ms
^C
--- api ping statistics ---
7 packets transmitted, 7 packets received, 0% packet loss

ifconfig : to get ip address of container, i.e., 172.18.0.4

eth0      Link encap:Ethernet  HWaddr 02:42:AC:12:00:04  
          inet addr:172.18.0.4  Bcast:172.18.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:98 errors:0 dropped:0 overruns:0 frame:0
          TX packets:70 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:12006 (11.7 KiB)  TX bytes:418746 (408.9 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:4 errors:0 dropped:0 overruns:0 frame:0
          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:215 (215.0 B)  TX bytes:215 (215.0 B)


Viewing Logs
-------------

docker-compose logs : to view the across all containers of an application

docker-compose logs --help

Usage:  docker compose logs [OPTIONS] [SERVICE...]

View output from containers

Options:
  -f, --follow          Follow log output.
      --no-color        Produce monochrome output.
      --no-log-prefix   Don't print prefix in logs.
      --since string    Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)
      --tail string     Number of lines to show from the end of the logs for each container. (default "all")
  -t, --timestamps      Show timestamps.
      --until string    Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)