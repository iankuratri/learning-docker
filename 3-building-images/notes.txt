Image
------

An image includes everything an application needs to be run.

* A cut down OS
* Third party libraries
* Application files
* Env variables


Container
----------

A container is like a virtual machine which:

* Provides an isolated env 
* Can be stopped & restarted
* its just a process!

A container gets its file system from the image


Dockerfile
-----------

A Dockerfile contains instructions for building an image.

FROM - for specifying the base image
WORKDIR - for specifying the working directory 
COPY - for copying files and directories
ADD - for adding files and directories, Addition feature: if a compressed file is passed it will be unzipped, can pass web links for files
RUN - for executing operating system commands
ENV - for setting env variables
EXPOSE - for telling docker that our container is starting on a given port
USER - for specifying the user that should run the application
CMD, ENTRYPOINT - for specifying command that should be executed, when we start the container

CMD
----
* Shell form
* /bin/sh
* cmd
CMD npm start

* Exec form
CMD ["npm","start"]

RUN vs CMD
-----------
Run is build time instruction, use RUN while building the app
CMD is run time instruction, use CMD after the app is built


Build Optimization
-------------------

To optimize build process add Stable instructions first, then add Changing instructions.


Removing images and containers
-------------------------------

docker image prune : to remove all dangling images

docker container prune : to remove all stopped containers


Tagging images
---------------

docker build -t react-app:1 . 
react-app is app name, 1 is app version which is used as a tag

docker image remove react-app:1 
remove react-app with tag 1

docker image tag react-app:latest react-app:1
tagging image after build

docker image tag react-app:2 react-app:latest
explicitly apply latest to newest image with tag 2


Sharing docker images
----------------------

1. Go to hub.docker.com 
2. Sign in or sign un 
3. Create a Repository, lets say react-app
4. Name of our Repository will be username/repo_name, that is `ankurzenways/react-app` in out case 
5. Build local image using `docker build -t react-app:1 .`
5. To push our local image to docker hub we have to change name of our local image to `ankurzenways/react-app`
   
   docker image tag [imageId] ankurzenways/react-app:2 
   or
   docker image tag react-app:1 ankurzenways/react-app:2

6. Login to docker account in terminal using `docker login`, then type username and password
7. Now push your local docker image to docker hub 

   docker push ankurzenways/react-app:2

8. To push next version of your image to docker hub

   docker push ankurzenways/react-app:2


Optionally, we can connect our docker hub account to Github or Bitbucket account, 
so every time we do a push, docker hub automatically pulls the latest code and build a new image. 


Saving and Loading docker images
---------------------------------

Saving
-------

Lets say we have a docker image on machine 1 and we have to put it on machine 2 without putting it on docker hub.
How do we do it?
We can save that image in a compressed file on machine 1 and load that image on machine 2

docker image save --help
Usage:  docker image save [OPTIONS] IMAGE [IMAGE...]
Save one or more images to a tar archive (streamed to STDOUT by default)
Options:
  -o, --output string   Write to a file, instead of STDOUT

docker image save -o react-app.tar react-app:1
react-app.tar is the file name here, react-app:1 is the image name

A react-app.tar file will be created

Loading
--------

docker image load --help
Usage:  docker image load [OPTIONS]
Load an image from a tar archive or STDIN
Options:
  -i, --input string   Read from tar archive file, instead of STDIN
  -q, --quiet          Suppress the load output

docker image load -i react-app.tar
the above command loads docker image from `react-app.tar` file